/*
 * Objetivo: 13.25 (Lebre e a tartaruga) Produza uma vers√£o gr√°fica da simula√ß√£o da lebre e tartaruga (Quest√£o 7.28). Simule a montanha desenhando
 * um arco que se estende do canto inferior esquerdo da janela ao canto superior direito. A lebre e a tartaruga devem correr subindo a montanha.
 * Implemente a sa√≠da gr√°fica para imprimir a tartaruga e a lebre no arco a cada movimento. [Dica: estenda o percurso da corrida de
 * 70 para 300 a fim de permitir uma √°rea gr√°fica maior.]
 * 
 * 7.28 (Simula√ß√£o: a tartaruga e a lebre) Neste problema, voc√™ recriar√° a cl√°ssica corrida da tartaruga e da lebre. Voc√™ utilizar√° gera√ß√£o de
 * n√∫meros aleat√≥rios para desenvolver uma simula√ß√£o desse evento memor√°vel.
 * Nossos competidores come√ßam a corrida no quadrado 1 de 70 quadrados. Cada um representa uma poss√≠vel posi√ß√£o ao longo do percurso
 * da competi√ß√£o. A linha de chegada est√° no quadrado 70. O primeiro competidor a alcan√ßar ou passar o quadrado 70 √© recompensado
 * com um cesto de cenouras frescas e alface. O percurso envolve subir uma montanha escorregadia, por isso, ocasionalmente os competidores
 * perdem terreno.
 * Um rel√≥gio emite um tique por segundo. A cada tique-taque do rel√≥gio, seu aplicativo deve ajustar a posi√ß√£o dos animais de acordo com
 * as regras na Figura 7.32. Use vari√°veis para monitorar as posi√ß√µes dos animais (isto √©, os n√∫meros de posi√ß√£o s√£o 1 a 70). Inicie cada animal
 * na posi√ß√£o 1 (a "largada"). Se um animal escorregar para a esquerda do quadrado 1, mova-o novamente para o quadrado 1.
 * 
 * 		Animal 				  Tipo de movimento 		Porcentagem do tempo		Movimento real
 * 	Tartaruga 			    	Caminhada r√°pida 			50%						 3	 quadrados √† direita
 * 								Escorreg√£o 					20% 					 6	 quadrados √† esquerda
 *							    Caminhada lenta				30%						 1   quadrado √† direita
 *
 *  Lebre					    Dormir 						20% 					 0   Sem nenhum movimento
 * 								Salto grande 				20% 				   	 9 	 quadrados √† direita
 * 								Escorreg√£o grande 			10%  					 12  quadrados √† esquerda
 * 								Salto pequeno 				30%					     1   quadrado √† direita
 * 								scorreg√£o pequeno 			20% 			     	 2   quadrados √† esquerda
 * 
 * Gere as porcentagens na Figura 7.32 produzindo um inteiro aleat√≥rio i no intervalo 1 ÙÄ?§ i ÙÄ?§ 10. Para a tartaruga, realize uma ‚Äúcaminhada
 * r√°pida‚Ä? quando 1 <= i <= 5, um ‚Äúescorreg√£o‚Ä? quando 6 <= i <= 7 ou uma ‚Äúcaminhada lenta‚Ä? quando 8 <= i <= 10. Utilize uma t√©cnica semelhante
 * para mover a lebre.
 * Comece a corrida exibindo
 * BANG !!!!!
 * E  L√? V√ÉO ELES !!!!!
 * Ent√£o, para cada tique do rel√≥gio (isto √©, para cada repeti√ß√£o de um loop), exiba uma linha de 70 posi√ß√µes mostrando a letra T na posi√ß√£o
 * da tartaruga e a letra H na posi√ß√£o da lebre. Ocasionalmente, os competidores ocupar√£o o mesmo quadrado. Nesse caso, a tartaruga
 * morde a lebre e seu aplicativo deve exibir AI!!! come√ßando nessa posi√ß√£o. Todas as outras posi√ß√µes da sa√≠da diferentes de T, H ou AI!!!
 * ( no caso de um empate) devem estar em branco.
 * Depois de cada linha ser exibida, teste se o animal alcan√ßou ou passou o quadrado 70. Se tiver alcan√ßado, exiba o Status e termine a
 * simula√ß√£o. Se a tartaruga ganhar, exiba A TARTARUGA VENCEU!!! √äH!!! Se a lebre ganhar, exiba A LEBRE GANHOU. OH. Se os dois
 * ganharem na mesma hora, voc√™ pode querer favorecer a tartaruga (a "coitadinha") ou exibir OCORREU UM EMPATE. Se nenhum animal
 * ganhar, realize o loop novamente para simular o pr√≥ximo tique do rel√≥gio. Quando voc√™ estiver pronto para executar seu aplicativo, monte
 * um grupo de f√£s para observar a corrida. Voc√™ se surpreender√° com a empolga√ß√£o da sua audi√™ncia!
 * Mais adiante no livro, introduziremos v√°rias capacidades do Java, como gr√°ficos, imagens, anima√ß√£o, som e multithreading. √Ä medida
 * que estudar esses recursos, voc√™ pode se divertir aprimorando sua simula√ß√£o da competi√ß√£o entre a lebre e a tartaruga.
 * 
 * Autor: Gustavo Alves
 * Data: 18/03/2019
 */

package ch27.ex27_25;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.security.SecureRandom;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

public class LebreTartaruga extends JPanel implements ActionListener {
	private int xTartaruga = 40;
	private int yTartaruga = 100;
	private int xLebre = 40;
	private int yLebre = 40;

	private int movimentoTartaruga;
	private int movimentoLebre;

	private enum Status {
		TARTARUGA, LEBRE, EMPATE, CONTINUA,
	};

	private Status statusCorrida = Status.CONTINUA;

	private BufferedImage tartarugaImg = null;
	private BufferedImage lebreImg = null;
	private BufferedImage bandeiraImg = null;
	private BufferedImage cestoImg = null;

	private final SecureRandom random = new SecureRandom();

	private Timer time;

	private String statusTarturaga = "";
	private String statusLebre = "";

	public LebreTartaruga() {
		setBackground(Color.WHITE);

		try {
			tartarugaImg = ImageIO.read(new File("./src/ch13/ex13_25/images/Tartaruga25.png"));
			lebreImg = ImageIO.read(new File("./src/ch13/ex13_25/images/Lebre25.png"));
			bandeiraImg = ImageIO.read(new File("./src/ch13/ex13_25/images/Bandeira25.png"));
			cestoImg = ImageIO.read(new File("./src/ch13/ex13_25/images/cesto25.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}

		time = new Timer(500, this);
		time.start();
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g;

		g.setFont(new Font("SansSerif", Font.PLAIN, 16));
		g.drawString("Tartaruga: " + statusTarturaga, 10, 50);
		g.drawString("Lebre: " + statusLebre, 10, 80);

		// desenha a montanha (isto √©, a pista para a corrida)
		g.setColor(new Color(189, 121, 66));
		g2d.setStroke(new BasicStroke(3.0f));
		g.drawLine(0, getHeight() - 70, getWidth() - 70, 0);
		g.drawLine(90, getHeight(), getWidth(), 90);

		if (statusCorrida == Status.EMPATE) {
			g.drawImage(tartarugaImg, 585, getHeight() - 650, this);
			g.drawImage(lebreImg, 585, getHeight() - 590, this);
		} else if (statusCorrida == Status.TARTARUGA) {
			g.drawImage(tartarugaImg, 585, getHeight() - 650, this);
			g.drawImage(lebreImg, xLebre, getHeight() - yLebre, this);
		} else if (statusCorrida == Status.LEBRE) {
			g.drawImage(lebreImg, 585, getHeight() - 590, this);
			g.drawImage(tartarugaImg, xTartaruga, getHeight() - yTartaruga, this);
		} else {
			g.drawImage(tartarugaImg, xTartaruga, getHeight() - yTartaruga, this);
			g.drawImage(lebreImg, xLebre, getHeight() - yLebre, this);
		}

		g.drawImage(bandeiraImg, 530, getHeight() - 690, this);
		g.setColor(Color.RED);
		g2d.setStroke(new BasicStroke(5.0f));
		g.drawLine(580, getHeight() - 660, 580, 190);
		g.drawImage(cestoImg, 630, getHeight() - 660, this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (statusCorrida == Status.CONTINUA)
			geraMovimento();
		else if (statusCorrida == Status.TARTARUGA) {
			time.stop();
			JOptionPane.showMessageDialog(LebreTartaruga.this, "A TARTARUGA VENCEU!!! √äH!!!", "Tartaruga Ganhou '-'",
					JOptionPane.INFORMATION_MESSAGE);
		} else if (statusCorrida == Status.LEBRE) {
			time.stop();
			JOptionPane.showMessageDialog(LebreTartaruga.this, "LEBRE GANHOU. OH ;-;", "Infelismente a Lebre ganhou",
					JOptionPane.INFORMATION_MESSAGE);
		} else { // Status.EMPATE
			time.stop();
			JOptionPane.showMessageDialog(LebreTartaruga.this, "OCORREU UM EMPATE.", "Os dois ganharam na mesma hora",
					JOptionPane.INFORMATION_MESSAGE);
		}
	}

	public void geraMovimento() {
		int tartarugaRandom = 1 + random.nextInt(10);
		if (tartarugaRandom >= 1 && tartarugaRandom <= 5) {// ‚Äúcaminhada r√°pida‚Ä? = 3 quadrados √† direita
			movimentoTartaruga = 3;
			statusTarturaga = "Caminhada r√°pida";
		} else if (tartarugaRandom >= 6 && tartarugaRandom <= 7) { // ‚Äúescorreg√£o‚Ä? = 6 quadrados √† esquerda
			movimentoTartaruga = -6;
			statusTarturaga = "Escorreg√£o";
		} else if (tartarugaRandom >= 8 && tartarugaRandom <= 10) { // ‚Äúcaminhada lenta‚Ä? = 1 quadrado √† direita
			movimentoTartaruga = 1;
			statusTarturaga = "Caminhada lenta";
		}

		int lebreRandom = 1 + random.nextInt(10);
		if (lebreRandom == 1 || lebreRandom == 2) {// Dormir = Sem nenhum movimento
			movimentoLebre = 0;
			statusLebre = "Dormir";
		} else if (lebreRandom == 3 || lebreRandom == 4) { // Salto grande = 9 quadrados √† direita
			movimentoLebre = 9;
			statusLebre = "Salto grande";
		} else if (lebreRandom == 6 || lebreRandom == 7 || lebreRandom == 8) { // Salto pequeno = 1 quadrado √† direita
			movimentoLebre = 1;
			statusLebre = "Salto pequeno";
		} else if (lebreRandom == 9 || lebreRandom == 10) { // Escorreg√£o pequeno = 2 quadrados √† esquerda
			movimentoLebre = -2;
			statusLebre = "Escorreg√£o pequeno";
		} else if (lebreRandom == 5) { // Escorreg√£o grande = 12 quadrados √† esquerda
			movimentoLebre = -12;
			statusLebre = "Escorreg√£o grande";
		}

		setCoordenadas();
	}

	public void setCoordenadas() {
		// configura a posi√ß√£o da tartaruga
		if (movimentoTartaruga > 0) { // verifica se movimento √© negativo, ou seja, a tartaruga "anda para tr√°s"
			for (int i = 0; i < movimentoTartaruga; i++) {
				xTartaruga += 10;
				yTartaruga += 10;
			}
		} else if (movimentoTartaruga == -6 && xTartaruga - 60 < 40) { // se, volta do √≠nicio
			xTartaruga = 40;
			yTartaruga = 100;
		} else {
			for (int i = 0; i < Math.abs(movimentoTartaruga); i++) {
				xTartaruga -= 10;
				yTartaruga -= 10;
			}
		}

		// configura a posi√ß√£o da lebre
		if (movimentoLebre >= 0) { // verifica se movimento √© positivo, ou seja, a lebre "anda para frente"
			for (int i = 0; i < movimentoLebre; i++) {
				xLebre += 10;
				yLebre += 10;
			}
		} else if ((movimentoLebre == -12 && xLebre - 120 < 40) || (movimentoLebre == -2 && xLebre - 20 < 40)) {
			xLebre = 40;
			yLebre = 40;
		} else {
			for (int i = 0; i < Math.abs(movimentoLebre); i++) {
				xLebre -= 10;
				yLebre -= 10;
			}
		}

		setStatus();
	}

	public void setStatus() {
		if (xTartaruga > 580 && xLebre > 580)
			statusCorrida = Status.EMPATE;
		else if (xTartaruga > 580)
			statusCorrida = Status.TARTARUGA;
		else if (xLebre > 580)
			statusCorrida = Status.LEBRE;
		else
			statusCorrida = Status.CONTINUA;

		repaint();
	}

	public static void main(String[] args) {
		JFrame frame = new JFrame("Tartaruga e a Lebre");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		LebreTartaruga corrida = new LebreTartaruga();
		frame.add(corrida);

		frame.setSize(685, 720);
		frame.setResizable(false);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}

}
